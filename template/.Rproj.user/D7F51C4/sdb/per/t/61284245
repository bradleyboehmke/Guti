{
    "collab_server" : "",
    "contents" : "#This is the base template for creating shiny apps for BDP\n#created by Isaac J. Faber and Andrew Skene\n#29 October 2015\n\n#build list of required packages for app\n#minimum both shiny, shinydashboard and lubridate are required\nlibrary('shiny')\nlibrary('shinydashboard')\nlibrary('lubridate')\nlibrary('DT') #must use git hub version!!!! must be version 0.1.45 or >\nlibrary('shinyBS')\nlibrary('htmlwidgets')\nlibrary('plotly')\nlibrary('rmarkdown')\nlibrary('lubridate')\nlibrary('plyr')\nlibrary('c3Services')\n\n# Source the configuration for this app.\nsource(\"config.R\")\n\n#source the app specific functions script that will be in the same directory\nsource(\"lib/app/app_functions.R\")\n\n# source the various component files containing the ui definitions and\n# supporting functions\nsource(\"lib/component/act.R\")\nsource(\"lib/component/afd.R\")\nsource(\"lib/component/data.R\")\nsource(\"lib/component/menu.R\")\nsource(\"lib/component/nst.R\")\nsource(\"lib/component/tool.R\")\n\n\n################USER INTERFACE BUILD####################\n#create the User Interface\nui <- dashboardPage(\n  skin = \"green\",\n  dashboardHeader(title = config$title),\n  dashboardSidebar(\n    imageOutput(\"image\", height = \"auto\",width=\"auto\", inline=FALSE),\n    sidebarMenu(\n      id=\"tabs\",\n      sidebarMenuOutput('menuSidebar')\n    )\n  ),\n  dashboardBody(\n    tabItems(\n      uiToolTabItem(),\n      uiDataTabItem(config),\n      uiAfdTabItem(config),\n      uiNstTabItem(),\n      uiActTabItem()\n    )\n  )\n)\n\n###############SERVER SIDE BUILD#############\nserver <- function(input, output, session) {\n\n  #Create a local variable that will cause reactive events\n  currentValues <- reactiveValues()\n  currentValues$config <- config\n\n#######Populate Sidebar Menu######\n  output$menuSidebar<-renderMenu({\n    if(length(currentValues$data)>0){\n      uiActionSidebarMenu(config)\n      #sidebarMenu(\n      #  #comment out next line for operational deployment\n      #  menuItem(\"Load Data Files\",tabName=\"Data\",icon=icon(\"file\")),\n      #  #uncomment for operational deployment\n      #  #menuItem(\"Load-Filter-Explore\", tabName = \"AFDs\", icon = icon(\"database\")),\n      #  menuItem(\"New Tab\", tabName = \"NT\", icon = icon(\"dashboard\"),\n      #           menuSubItem('New Sub Tab', tabName = 'NST', icon = icon('dashboard'))\n      #  ),\n      #  menuItem(\"Take Action\",tabName=\"ACT\",icon=icon('rocket'))\n      #)\n    }\n    else{\n      uiNonActionSidebarMenu(config)\n      #sidebarMenu(\n      #  #comment out next line for operational deployment\n      #  menuItem(\"Load Data Files\",tabName=\"Data\",icon=icon(\"file\"))\n      #  #uncomment for operational deployment\n      #  #menuItem(\"Load-Filter-Explore\", tabName = \"AFDs\", icon = icon(\"database\"))\n      #)\n    }\n  })\n  isolate({updateTabItems(session, \"tabs\", \"Tool\")})\n\n\n#####read in data from file list#########\n  # populate the list of filenames in the data read tab\n  # This is done in the server block to ensure that different users/sessions will have appropriately different available data sets.\n  output$dataFiles <-\n    renderUI({\n      input$refreshList\n      dataSets <- list.files('data')\n      selectInput(\"dataFiles\", 'Select data files', choices = dataSets , multiple=TRUE, selectize=FALSE)\n    })\n\n  observeEvent(input$file_load,{\n    currentValues$isAfd <- FALSE\n\n    tryCatch({\n      currentValues$data <- loadData(input$dataFiles, currentValues, session)\n      updateValues(currentValues)\n      currentValues$loadedDataSets <- input$dataFiles\n    }, warning = function(w) {\n      print(paste(\"loadFiles warning (1): \",w))\n      clearData(currentValues)\n    }, error = function(e) {\n      print(paste(\"loadFiles error (2): \",e))\n      clearData(currentValues)\n    }, finally = {\n    })\n  })\n\n\n#####AFD TABLE tab######\n  output$afd_table <- afdDataTable(input, currentValues, session)\n\n  # Load data when the AFD rows are selected\n  observeEvent(input$afd_load, {\n    selected <- input$afd_table_rows_selected\n    if (length(selected)) {\n      afds <- currentValues$AFDs\n      afdIds <- laply(selected, function(id) {afds[as.numeric(id),]$id})\n\n      currentValues$isAfd <- TRUE\n\n      tryCatch({\n        currentValues$data <- loadData(afdIds, currentValues, session)\n        updateValues(currentValues)\n        currentValues$loadedDataSets <- afdIds\n      }, warning = function(w) {\n        logger.log(paste(\"loadFiles warning: \",w))\n        clearData(currentValues)\n      }, error = function(e) {\n        logger.log(paste(\"loadFiles error: \",e))\n        clearData(currentValues)\n      }, finally = {\n      })\n    }\n  })\n\n  #render ARCYBER logo\n  output$image <- renderImage({\n    return(list(\n      src = \"www/ACC.png\",\n      contentType = \"image/png\",\n      width = '100%',\n      height = '100%'\n    ))\n  },deleteFile = FALSE)\n\n  #This function will create an updated currentData object to be passed to all other functions\n  #The currentValues object is a list and the currentData object is a data frame\n  #This function should be repeated for every dataframe in the currentValues object\n  #Important!!! must change the term 'data' to the name of the data frame in the list!!\n\n  currentData<-reactive({\n    currentData <- currentValues$data[input$filterDataTable_rows_all,]\n  })\n\n  #use these reactive dates to build left and right limit of plots\n  date1<-reactive({min(currentData()$Date)})\n  date2<-reactive({max(currentData()$Date)})\n\n\n  ######NST Example Tab Content#######\n  output$NSTBox <- nstValueBox(currentData)\n  output$NSTPlot <- nstPlotly(input, currentData)\n  output$NST_Dates <- nstDatesUi(currentValues, date1, date2)\n\n\n  ######Take Action tab######\n\n  output$actionTable = DT::renderDataTable(currentValues$action, filter='top',options=list(autoWidth=TRUE))\n\n  #create a proxy table to prevent from being rendered multiple times\n  proxy = dataTableProxy('actionTable')\n\n  #move from action to cleared or deconflict and remove from action\n  observeEvent(input$Update,{\n    s = input$actionTable_rows_selected\n    for(i in 1:length(s)){\n      currentValues$action$action_req[as.numeric(s[i])]<-input$ActionReq\n      currentValues$action$behavior_type[as.numeric(s[i])]<-input$Type\n    }\n  })\n\n  observeEvent(input$selectAll, {\n    selectRows(proxy, as.numeric(input$actionTable_rows_all))\n  })\n\n  observeEvent(input$clear, {\n    selectRows(proxy, NULL)\n  })\n\n  #download action report\n  output$downloadReport <- downloadActionReport(input, currentValues, date1, date2)\n\n\n  ##DATA TABLEs##\n  output$rawDataTable <- dataRawDataTable(currentValues)\n  output$filterDataTable <- dataFilterDataTable(currentValues)\n\n  #download country data table\n  output$downloadRawDataTable <- downloadHandler(\n    filename = function() {\n      paste('Raw_Data_', Sys.Date(), '.csv', sep='')\n    },\n    content = function(file) {\n      write.csv(currentData(), file)\n    }\n  )\n\n}\n\n\nshinyApp(ui, server)\n",
    "created" : 1484741761948.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "282842172",
    "id" : "61284245",
    "lastKnownWriteTime" : 1484745434,
    "last_content_update" : 1484745434995,
    "path" : "~/Desktop/R Projects/Guti/template/app.R",
    "project_path" : "app.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}